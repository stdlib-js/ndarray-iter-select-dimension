{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isPlainObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { isPrimitive as isInteger } from '@stdlib/assert-is-integer';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport iteratorSymbol from '@stdlib/symbol-iterator';\nimport filled from '@stdlib/array-base-filled';\nimport getShape from '@stdlib/ndarray-shape';\nimport normalizeIndex from '@stdlib/ndarray-base-normalize-index';\nimport numel from '@stdlib/ndarray-base-numel';\nimport ndslice from '@stdlib/ndarray-base-slice';\nimport Slice from '@stdlib/slice-ctor';\nimport args2multislice from '@stdlib/slice-base-args2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each view along a specified dimension.\n*\n* @param {ndarray} x - input value\n* @param {integer} dim - dimension index\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @param {boolean} [options.keepdim=false] - boolean indicating whether returned views should include the selected dimension as a singleton dimension\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n* import ndarray2array from '@stdlib/ndarray-to-array';\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerSelectDimension( x, 0 );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerSelectDimension( x, dim ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null4f', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'null7f', dim ) );\n\t}\n\topts = {\n\t\t'writable': false,\n\t\t'keepdim': false\n\t};\n\tif ( arguments.length > 2 ) {\n\t\toptions = arguments[ 2 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'null2V', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2o', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'nullF4' ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'keepdim' ) ) {\n\t\t\tif ( !isBoolean( options.keepdim ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2o', 'keepdim', options.keepdim ) );\n\t\t\t}\n\t\t\topts.keepdim = options.keepdim;\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, ndims-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'nullF8', ndims, dim ) );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of views (i.e., the dimension size):\n\tN = shape[ d ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = filled( null, ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Update the index array to generate the next view:\n\t\tif ( opts.keepdim ) {\n\t\t\tidx[ d ] = new Slice( i, i+1, 1 );\n\t\t} else {\n\t\t\tidx[ d ] = i;\n\t\t}\n\t\t// Create a multi-slice for the next view:\n\t\ts = args2multislice( idx );\n\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': ndslice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerSelectDimension( x, dim, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default nditerSelectDimension;\n"],"names":["nditerSelectDimension","x","dim","options","shape","ndims","opts","iter","FLG","idx","N","d","i","isndarrayLike","TypeError","format","isInteger","writable","keepdim","arguments","length","isPlainObject","hasOwnProp","isBoolean","readonly","isReadOnly","Error","getShape","normalizeIndex","RangeError","numel","filled","setReadOnly","s","done","Slice","args2multislice","value","ndslice","iteratorSymbol"],"mappings":";;uiDAiFA,SAASA,EAAuBC,EAAGC,GAClC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,IAAMC,EAAeZ,GACpB,MAAM,IAAIa,UAAWC,EAAQ,SAAUd,IAExC,IAAMe,EAAWd,GAChB,MAAM,IAAIY,UAAWC,EAAQ,SAAUb,IAMxC,GAJAI,EAAO,CACNW,UAAY,EACZC,SAAW,GAEPC,UAAUC,OAAS,EAAI,CAE3B,IAAMC,EADNlB,EAAUgB,UAAW,IAEpB,MAAM,IAAIL,UAAWC,EAAQ,SAAUZ,IAExC,GAAKmB,EAAYnB,EAAS,YAAe,CACxC,IAAMoB,EAAWpB,EAAQqB,UACxB,MAAM,IAAIV,UAAWC,EAAQ,SAAU,WAAYZ,EAAQqB,WAG5D,GADAlB,EAAKW,UAAYd,EAAQqB,SACpBlB,EAAKW,UAAYQ,EAAYxB,GACjC,MAAM,IAAIyB,MAAOX,EAAQ,UAE1B,CACD,GAAKO,EAAYnB,EAAS,WAAc,CACvC,IAAMoB,EAAWpB,EAAQe,SACxB,MAAM,IAAIJ,UAAWC,EAAQ,SAAU,UAAWZ,EAAQe,UAE3DZ,EAAKY,QAAUf,EAAQe,OACvB,CACD,CAOD,GAJAb,GADAD,EAAQuB,EAAU1B,IACJmB,QAIF,KADZT,EAAIiB,EAAgB1B,EAAKG,EAAM,IAE9B,MAAM,IAAIwB,WAAYd,EAAQ,SAAUV,EAAOH,IAyBhD,OArBW,KADXQ,EAAIoB,EAAO1B,MAEVI,GAAM,GAGPE,EAAIN,EAAOO,GAGXC,GAAK,EAGLH,EAAMsB,EAAQ,KAAM1B,GAIpB2B,EADAzB,EAAO,CAAA,EACY,QAenB,WACC,IAAI0B,EAGJ,GADArB,GAAK,EACAJ,GAAOI,GAAKF,EAChB,MAAO,CACNwB,MAAQ,GAIL5B,EAAKY,QACTT,EAAKE,GAAM,IAAIwB,EAAOvB,EAAGA,EAAE,EAAG,GAE9BH,EAAKE,GAAMC,EAMZ,OAHAqB,EAAIG,EAAiB3B,GAGd,CACN4B,MAASC,EAASrC,EAAGgC,GAAG,EAAM3B,EAAKW,UACnCiB,MAAQ,EAET,IArCDF,EAAazB,EAAM,UA8CnB,SAAc8B,GAEb,GADA7B,GAAM,EACDW,UAAUC,OACd,MAAO,CACNiB,MAASA,EACTH,MAAQ,GAGV,MAAO,CACNA,MAAQ,EAET,IAtDIK,GACJP,EAAazB,EAAMgC,GA6DpB,WACC,OAAOvC,EAAuBC,EAAGC,EAAKI,EACtC,IA7DMC,CA8DR"}