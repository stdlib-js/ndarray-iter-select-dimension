{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isPlainObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isReadOnly = require( '@stdlib/ndarray-base-assert-is-read-only' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol-iterator' );\nvar filled = require( '@stdlib/array-base-filled' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar normalizeIndex = require( '@stdlib/ndarray-base-normalize-index' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar ndslice = require( '@stdlib/ndarray-base-slice' );\nvar Slice = require( '@stdlib/slice-ctor' );\nvar args2multislice = require( '@stdlib/slice-base-args2multislice' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iterates over each view along a specified dimension.\n*\n* @param {ndarray} x - input value\n* @param {integer} dim - dimension index\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=true] - boolean indicating whether returned views should be read-only\n* @param {boolean} [options.keepdim=false] - boolean indicating whether returned views should include the selected dimension as a singleton dimension\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} second argument must be an integer\n* @throws {RangeError} dimension index exceeds the number of dimensions\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} cannot write to a read-only array\n* @returns {Iterator} iterator\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerSelectDimension( x, 0 );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\nfunction nditerSelectDimension( x, dim ) {\n\tvar options;\n\tvar shape;\n\tvar ndims;\n\tvar opts;\n\tvar iter;\n\tvar FLG;\n\tvar idx;\n\tvar N;\n\tvar d;\n\tvar i;\n\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray. Value: `%s`.', x ) );\n\t}\n\tif ( !isInteger( dim ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', dim ) );\n\t}\n\topts = {\n\t\t'writable': false,\n\t\t'keepdim': false\n\t};\n\tif ( arguments.length > 2 ) {\n\t\toptions = arguments[ 2 ];\n\t\tif ( !isPlainObject( options ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'readonly' ) ) {\n\t\t\tif ( !isBoolean( options.readonly ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'readonly', options.readonly ) );\n\t\t\t}\n\t\t\topts.writable = !options.readonly;\n\t\t\tif ( opts.writable && isReadOnly( x ) ) {\n\t\t\t\tthrow new Error( format( 'invalid option. Cannot write to read-only array.' ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'keepdim' ) ) {\n\t\t\tif ( !isBoolean( options.keepdim ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'keepdim', options.keepdim ) );\n\t\t\t}\n\t\t\topts.keepdim = options.keepdim;\n\t\t}\n\t}\n\t// Retrieve input array meta data:\n\tshape = getShape( x );\n\tndims = shape.length;\n\n\t// Normalize the dimension index:\n\td = normalizeIndex( dim, ndims-1 );\n\tif ( d === -1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Dimension index exceeds the number of dimensions. Number of dimensions: %d. Value: `%d`.', ndims, dim ) );\n\t}\n\t// Check whether the input array is empty...\n\tN = numel( shape );\n\tif ( N === 0 ) {\n\t\tFLG = true;\n\t}\n\t// Compute the number of views (i.e., the dimension size):\n\tN = shape[ d ];\n\n\t// Initialize a counter:\n\ti = -1;\n\n\t// Initialize an index array for generating slices:\n\tidx = filled( null, ndims );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar s;\n\n\t\ti += 1;\n\t\tif ( FLG || i >= N ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\t// Update the index array to generate the next view:\n\t\tif ( opts.keepdim ) {\n\t\t\tidx[ d ] = new Slice( i, i+1, 1 );\n\t\t} else {\n\t\t\tidx[ d ] = i;\n\t\t}\n\t\t// Create a multi-slice for the next view:\n\t\ts = args2multislice( idx );\n\n\t\t// Return the next slice:\n\t\treturn {\n\t\t\t'value': ndslice( x, s, true, opts.writable ),\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn nditerSelectDimension( x, dim, opts );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = nditerSelectDimension;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iterates over each view along a specified dimension.\n*\n* @module @stdlib/ndarray-iter-select-dimension\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var nditerSelectDimension = require( '@stdlib/ndarray-iter-select-dimension' );\n*\n* var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ], [ [ 5, 6 ], [ 7, 8 ] ] ] );\n* // returns <ndarray>\n*\n* var iter = nditerSelectDimension( x, 0 );\n*\n* var v = iter.next().value;\n* // returns <ndarray>\n*\n* var arr = ndarray2array( v );\n* // returns [ [ 1, 2 ], [ 3, 4 ] ]\n*\n* v = iter.next().value;\n* // returns <ndarray>\n*\n* arr = ndarray2array( v );\n* // returns [ [ 5, 6 ], [ 7, 8 ] ]\n*\n* // ...\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isPlainObject", "isBoolean", "isInteger", "isndarrayLike", "isReadOnly", "hasOwnProp", "iteratorSymbol", "filled", "getShape", "normalizeIndex", "numel", "ndslice", "Slice", "args2multislice", "format", "nditerSelectDimension", "x", "dim", "options", "shape", "ndims", "opts", "iter", "FLG", "idx", "N", "d", "i", "next", "end", "factory", "s", "value", "main"]
}
